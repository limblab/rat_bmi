function data_visual(an_data, data_ch, e

% %name of the directory where your data is stored
% data_dir = '/Volumes/fsmresfiles-3/Basic_Sciences/Phys/L_MillerLab/data/Rats/plexon_data/';
% %data_dir = '/Volumes/L_MillerLab/data/Rats/plexon_data/';
% 
% %name of the file to import
% filename = 'E2_170519_noobstacle_1';
% %E2_170519_noobstacle_1.plx, also 5-26 t2
% channels = [17 18 32:48]; %channels to import
% %full set of channels is Analog side 2 1:16, Vicon 17:18 Analog side 1 32:47, EMG 48:63
% 
% %TODO: update graphing things with channel labels based correctly on the
% %channels graphed (if I change channels up here I end up with an incorrect
% %y axis)
% 
% %if the data has already been converted, load
% if exist([data_dir 'mat_files/' filename '.mat'])
%     disp('loading data');
%     load([data_dir 'mat_files/' filename '.mat']);
% %otherwise import and save it
% else
%     disp('importing data');
%     an_data = import_plexon_analog(data_dir, filename, channels);
% end

%if you want to see the raw data...
plot_raw_data = true;
%data_ch = [32:47];
%get indices of channels with good data
idx = find(ismember(an_data.channel, data_ch));

%TODO: this is kind of messy, deal with it
if plot_raw_data
    sep_fact = 10;
    xvals = [1:size(an_data.data, 1)]/an_data.freq(1);
    data_plot = an_data.data(:, idx) + sep_fact*[1:size(an_data.data(:, idx), 2)];
    plot(xvals, data_plot)
    xlabel('Seconds');
    ylabel('Channel');
    yticks(([1:length(data_ch)])*sep_fact);
    yticklabels(an_data.channel(:, idx));
    ylim([0 (length(data_ch)+1)*sep_fact]);
    set(gca, 'FontSize', 20);
end

% exclude_ch = [39:47]; %channels to exclude from common average calculation
[~, ~, ex_idx] = intersect(exclude_ch, an_data.channel); 
ca_idx = setdiff(idx, ex_idx); 

%here's a quick wonky way of subtracting common average
common_av = mean(an_data.data(:, ca_idx)');
new_data = (an_data.data(:, idx)'-common_av)';
figure;
data_plot = new_data + sep_fact*[1:size(an_data.data(:, idx), 2)];
plot(xvals, data_plot)
xlabel('Seconds');
ylabel('Channel');
yticks(([1:length(data_ch)])*sep_fact);
yticklabels(an_data.channel(:, idx));
ylim([0 (length(data_ch)+1)*sep_fact]);
set(gca, 'FontSize', 20);
%TODO - add correct scaling for amplitude of LFPs
yyaxis right;

stpt = 10000; 
finpt = 15000; 

%TODO: spectrogram with and without common av subtracted
figure(10); set(gcf,'Name', 'Subtracted Common Avg'); 
figure(11); set(gcf,'Name', 'Raw Data');
for i=1:size(new_data, 2)
    figure(10); 
    subplot(4, 4, i);
    spectrogram(new_data(stpt:finpt, i),'yaxis',50); 
    title(['Channel ' num2str(an_data.channel(idx(i)))]);
    figure(11); 
    subplot(4, 4, i); 
    spectrogram(an_data.data(stpt:finpt, idx(i)),'yaxis',50); 
    title(['Channel ' num2str(an_data.channel(idx(i)))]); 
end
 

%TODO: bandpass filter at diff freqs
